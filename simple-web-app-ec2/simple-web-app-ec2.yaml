AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a simple web server on EC2 with Apache, SSM, and custom security rules for FortiDAST demoing purposes.

Parameters:
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t2.micro, t2.small, t3.micro, t3.small]
  AppVPC:
    Type: String
  KeyPairName:
    Description: Key pair name for SSH access
    Type: AWS::EC2::KeyPair::KeyName
  FortiDASTUUID:
    Description: UUID for an empty HTML file
    Type: String
  ElasticIPAlloc:
    Type: String
  LatestAmazonLinuxAmi:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>' 
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64' 

Resources:
  WebServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      ImageId: !Ref LatestAmazonLinuxAmi
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      IamInstanceProfile: !Ref SSMInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -ex
          dnf update -y
          dnf install -y httpd wget unzip git php php-cli php-fpm php-mysqli php-gd php-xml php-json php-mbstring mariadb105-server
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o /tmp/awscliv2.zip
          unzip /tmp/awscliv2.zip
          ./aws/install
          TOKEN=$(curl -s -m 5 -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
          INSTANCE_ID=$(curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/instance-id)
          aws ec2 associate-address --allocation-id ${ElasticIPAlloc} --instance-id $INSTANCE_ID
          echo "alias ll='ls -la'" > /etc/profile.d/ssm-user-alias.sh
          chmod +x /etc/profile.d/ssm-user-alias.sh
          systemctl enable --now httpd
          systemctl enable --now mariadb
          systemctl enable --now php-fpm
          mysql -u root <<EOF
          DROP DATABASE IF EXISTS dvwa;
          CREATE DATABASE dvwa;
          DROP USER IF EXISTS 'dvwa'@'localhost';
          CREATE USER 'dvwa'@'localhost' IDENTIFIED BY 'dvwapassword';
          GRANT ALL PRIVILEGES ON dvwa.* TO 'dvwa'@'localhost' WITH GRANT OPTION;
          FLUSH PRIVILEGES;
          EOF
          cd /var/www/html/
          git clone https://github.com/digininja/DVWA.git dvwa
          chown -R apache:apache /var/www/html
          chmod -R 755 /var/www/html
          cd dvwa/config
          cp config.inc.php.dist config.inc.php
          sed -i 's/p@ssw0rd/dvwapassword/' config.inc.php
          sed -i "s/localhost/127.0.0.1/" config.inc.php   
          install -m 644 /dev/null /var/www/html/${FortiDASTUUID}.html
          systemctl restart httpd 


      Tags:
        - Key: Name
          Value: !Sub "Demo - ${AWS::StackName}"
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP, SSH, and restrict outbound access
      VpcId: !Ref AppVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0  # Allow HTTP access from anywhere
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0  # Allow HTTPS access from anywhere
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
  SSMInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: WebServerSSMRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ["sts:AssumeRole"]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
  SSMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref SSMInstanceRole

Outputs:
  WebServerPublicIP:
    Description: Public IP address of the EC2 instance
    Value: !GetAtt WebServerInstance.PublicIp
